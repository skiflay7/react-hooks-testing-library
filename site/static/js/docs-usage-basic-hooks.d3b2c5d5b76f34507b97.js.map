{"version":3,"sources":["/Users/mxp001/programming/frontend/libraries/react-hooks-testing-library/docs/usage/basic-hooks.md"],"names":["_react2","_interopRequireDefault","__webpack_require__","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties2","default","mdx","_extends2","mdxType","id","parentName","className","href","isMDXComponent"],"mappings":"yfAEEA,GADAC,EAAAC,EAAA,kCACAA,EAAA,kDASIC,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,GACF,EAAAC,EAAAC,SAAAJ,EAAA,gBACD,OAAO,EAAAN,EAAAW,KAACP,GAAD,EAAAQ,EAAAF,SAAA,GAAeP,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,eAC5E,EAAAb,EAAAW,KAAA,KAAQ,CACNG,GAAM,eADR,gBAGA,EAAAd,EAAAW,KAAA,KAAQ,CACNG,GAAM,aADR,cAGA,EAAAd,EAAAW,KAAA,iEACA,EAAAX,EAAAW,KAAA,YAAK,EAAAX,EAAAW,KAAA,UAAAC,EAAAF,SAAA,CAAMK,WAAW,OAAU,CAC5BC,UAAa,gBADZ,+OAUL,EAAAhB,EAAAW,KAAA,qBAAe,EAAAX,EAAAW,KAAA,cAAYI,WAAW,KAAvB,cAAf,oCAAyG,EAAAf,EAAAW,KAAA,cAAYI,WAAW,KAAvB,cAAzG,6BAA4L,EAAAf,EAAAW,KAAA,cAAYI,WAAW,KAAvB,+BAA5L,MACA,EAAAf,EAAAW,KAAA,YAAK,EAAAX,EAAAW,KAAA,UAAAC,EAAAF,SAAA,CAAMK,WAAW,OAAU,CAC5BC,UAAa,gBADZ,4SAYL,EAAAhB,EAAAW,KAAA,8FACA,EAAAX,EAAAW,KAAA,KAAQ,CACNG,GAAM,WADR,YAGA,EAAAd,EAAAW,KAAA,oLAA8K,EAAAX,EAAAW,KAAA,cAAYI,WAAW,KAAvB,aAA9K,oCAAuQ,EAAAf,EAAAW,KAAA,cAAYI,WAAW,KAAvB,SAAvQ,sBACA,EAAAf,EAAAW,KAAA,YAAK,EAAAX,EAAAW,KAAA,UAAAC,EAAAF,SAAA,CAAMK,WAAW,OAAU,CAC5BC,UAAa,gBADZ,kTAeL,EAAAhB,EAAAW,KAAA,mBAAa,EAAAX,EAAAW,KAAA,cAAYI,WAAW,KAAvB,aAAb,4BAA8F,EAAAf,EAAAW,KAAA,cAAYI,WAAW,KAAvB,SAA9F,4DACA,EAAAf,EAAAW,KAAA,gEAA0D,EAAAX,EAAAW,KAAA,cAAYI,WAAW,KAAvB,aAA1D,aAA4H,EAAAf,EAAAW,KAAA,cAAYI,WAAW,KAAvB,OAA5H,iIAA4S,EAAAf,EAAAW,KAAA,cAAYI,WAAW,KAAvB,OAA5S,qBAAgX,EAAAf,EAAAW,KAAA,OAAAC,EAAAF,SAAA,CAAGK,WAAW,KAAQ,CAClYE,KAAQ,4CADoW,uBAAhX,MAGA,EAAAjB,EAAAW,KAAA,yDAAmD,EAAAX,EAAAW,KAAA,cAAYI,WAAW,KAAvB,cAAnD,0LAIJV,EAAWa,gBAAiB","file":"static/js/docs-usage-basic-hooks.d55c5579.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"basic-hooks\"\n    }}>{`Basic Hooks`}</h1>\n    <h2 {...{\n      \"id\": \"rendering\"\n    }}>{`Rendering`}</h2>\n    <p>{`Imagine we have a simple hook that we want to test:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { useState, useCallback } from 'react'\n\nexport default function useCounter() {\n  const [count, setCount] = useState(0)\n  const increment = useCallback(() => setCount(count + 1), [count])\n  return { count, increment }\n}\n`}</code></pre>\n    <p>{`To test `}<inlineCode parentName=\"p\">{`useCounter`}</inlineCode>{` we need to render it using the `}<inlineCode parentName=\"p\">{`renderHook`}</inlineCode>{` function to provided by `}<inlineCode parentName=\"p\">{`react-hooks-testing-library`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { renderHook } from 'react-hooks-testing-library'\nimport useCounter from './useCounter'\n\ntest('should use counter', () => {\n  const { result } = renderHook(() => useCounter())\n\n  expect(result.current.count).toBe(0)\n  expect(typeof result.current.increment).toBe('function')\n})\n`}</code></pre>\n    <p>{`As you can see, the result's current value matches what is returned by our hook.`}</p>\n    <h2 {...{\n      \"id\": \"updates\"\n    }}>{`Updates`}</h2>\n    <p>{`The test shown above is great and all, but it doesn't actually test what we want to use the counter for, i.e. counting. We can easily improve this test by calling the `}<inlineCode parentName=\"p\">{`increment`}</inlineCode>{` function and checking that the `}<inlineCode parentName=\"p\">{`count`}</inlineCode>{` value increases:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { renderHook, act } from 'react-hooks-testing-library'\nimport useCounter from './useCounter'\n\ntest('should increment counter', () => {\n  const { result } = renderHook(() => useCounter())\n\n  act(() => {\n    result.current.increment()\n  })\n\n  expect(result.current.count).toBe(1)\n})\n`}</code></pre>\n    <p>{`After `}<inlineCode parentName=\"p\">{`increment`}</inlineCode>{` is called, the current `}<inlineCode parentName=\"p\">{`count`}</inlineCode>{` value now reflects the new value returned by our hook.`}</p>\n    <p>{`You may have also noticed that we also wrapped the `}<inlineCode parentName=\"p\">{`increment`}</inlineCode>{` call in `}<inlineCode parentName=\"p\">{`act`}</inlineCode>{`. This utility simulates how our hook will act in a browser, allowing us to update the values within it. For more details on `}<inlineCode parentName=\"p\">{`act`}</inlineCode>{`, please see the `}<a parentName=\"p\" {...{\n        \"href\": \"https://fb.me/react-wrap-tests-with-act\"\n      }}>{`React documentation`}</a>{`.`}</p>\n    <p>{`So there we have it, the first test for our `}<inlineCode parentName=\"p\">{`useCounter`}</inlineCode>{` hook.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}